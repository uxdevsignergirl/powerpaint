/*
 * TCSS 305 – Winter 2015
 * Assignment 5 - PowerPaint
 */

package gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.geom.Line2D;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JPanel;

import tools.ToolInterface;

/**
 * Represents an SketchPad class.
 * @author Lola Howell
 * @version February 13, 2015
 */

@SuppressWarnings("serial")
public class SketchPad extends JPanel {
    /**
     * The width of the panel.
     */
    public static final int WIDTH = 550;

    /**
     * The height of the panel.
     */
    public static final int HEIGHT = 300;

    /**
     * The the thickness of the line.
     */
    public static final int STROKE_WIDTH = 5;

    /**
     * The current tool.
     */
    private ToolInterface myPresentTool;

    /**
     * The current shape.
     */
    private Shape myPresentShape;

    /**
     * The list of the Sketch objects.
     */
    private List<Sketch> mySavedSketches;

    /**
     * The stroke width of the line.
     */
    private int myStrokeWidth; 

    /**
     * The color of the line.
     */
    private Color myColor;

    /**
     * The boolean for the state of the grid.
     */
    private boolean myGridToggled;

    /**
     * Constructor for SketchPad object.
     */
    public SketchPad() {
        super();
        setBackground(Color.WHITE);
        mySavedSketches = new ArrayList<Sketch>();
        setPreferredSize(new Dimension(WIDTH, HEIGHT));
        myColor = Color.BLACK;
        myPresentShape = null;
        myGridToggled = false;
        myStrokeWidth = 5;
        addMouseListener(new MyMouseAdapter());
        addMouseMotionListener(new MyMouseMotionAdapter());
    }

    /**
     * Paints all of the Sketches including present if there
     * is one, as well as the grid if it has been toggled.
     * 
     * @param theGraphic The graphics context to use for painting.
     */
    @Override
    public void paintComponent(final Graphics theGraphic) {
        super.paintComponent(theGraphic);
        final Graphics2D g2d = (Graphics2D) theGraphic;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        for (Sketch s : mySavedSketches) {
            g2d.setColor(s.getColor());
            g2d.setStroke(s.getStrokeWidth());
            g2d.draw(s.getShape());
        }
        if (myPresentShape != null) {
            g2d.setPaint(myColor);
            g2d.setStroke(new BasicStroke(myStrokeWidth));
            g2d.draw(myPresentShape);
        }
        if (myGridToggled) {
            final int height = getHeight();
            final int width = getWidth();
            g2d.setColor(Color.GRAY);
            g2d.setStroke(new BasicStroke(1));
            final Line2D.Double gridLine = new Line2D.Double();
            for (int x = 0; x < width; x++) {
                if (x % 10 == 0) {
                    gridLine.setLine(x, 0, x, height);
                    g2d.draw(gridLine);
                }
            }
            for (int y = 0; y < height; y++) {
                if (y % 10 == 0) {
                    gridLine.setLine(0, y, width, y);
                    g2d.draw(gridLine);
                }
            }
        }
    }

    /**
     * Toggle the visibility of the grid.
     * 
     * @param theState is the state of the 
     * grid button checked - true, unchecked - false.
     */
    public void toggleGrid(final Boolean theState) {
        myGridToggled = theState;
        repaint();
    }

    /**
     * Removes the sketches from the SketchPad.
     */
    public void clearSketches() {
        mySavedSketches.clear();
        myPresentShape = null;
        repaint();
    }

    /**
     * Sets the tool of the SketchPad.
     * 
     * @param theTool tool to be set to.
     */
    public void setTool(final ToolInterface theTool) {
        myPresentTool = theTool;
    }

    /**
     * Sets the color of the SketchPad.
     * 
     * @param theColor color to be set to.
     */
    public void setColor(final Color theColor){
        myColor = theColor;      
    }

    /**
     * Sets the thickness of the Stroke.
     * 
     * @param theStrokeWidth the width to beset to.
     */
    public void setThickness(final int theStrokeWidth){
        myStrokeWidth = theStrokeWidth;

    }

    /**
     * Listens for mouse pressed, released to draw on SketchPad.
     */
    private class MyMouseAdapter extends MouseAdapter {

        /**
         * Handles a Pressed event.
         * 
         * @param theEvent The event.
         */
        @Override
        public void mousePressed(final MouseEvent theEvent) {
            myPresentShape = myPresentTool.start(theEvent.getX(), theEvent.getY());
            repaint();
        }

        /**
         * Handles a Released event.
         * 
         * @param theEvent The event.
         */
        @Override
        public void mouseReleased(final MouseEvent theEvent) {
            mySavedSketches.add(new Sketch(myPresentShape, myColor, myStrokeWidth));
            repaint();
        }
    }
    /**
     * Listens for mouse dragged to draw on SketchPad.
     */
    private class MyMouseMotionAdapter extends MouseMotionAdapter {

        /**
         * Handles a Dragged event.
         * 
         * @param theEvent The event.
         */
        @Override
        public void mouseDragged(final MouseEvent theEvent) {
            myPresentShape = myPresentTool.move(theEvent.getX(), theEvent.getY());
            repaint();    
        }
    }
}





